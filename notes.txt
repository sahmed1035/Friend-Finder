STEPS:
1. Setup the server. npm init to create package JSON
2. Install npm packages.
3. create server.js
4. run the server and check if it is listening to the port.
5. build folder structure to organize the code.
6. create all the html pages. include CDN for CSS and JavaScript. CSS=bootstrap and font-awesome, JavaScript=jQuery
7. build out the html routing so that router can deliver html pages to the users. htmlRoutes.js
8. include our htmlRoute.js file in our server.js by requiring it.
9. create the data. create an array of data. friends.js
10. build apiRoutes.js for accessing friends.js
11. include apiRoutes in the server.js

//next need to build a way for the users information that they put in the survey to get put in  the same format as my
//other objects that I can compare them.
//closest match based on my answer

/***Now go to servey.html and have the user send an object formatted in the same way to our server
     * at this route through a POST request using AJAX*/

Determining the user's most compatible friend:

1.	Convert each user's results into a simple array of numbers 
2.	Compare the difference between current user's scores against those from other users, question by question.
3.	Add up the differences to calculate the `totalDifference`.
- two arrays, two loops. First for the friendsArray holding all the friends. Second for the score array for each friend.
     * Example:
       - User 1: `[5, 1, 4, 4, 5, 1, 2, 5, 4, 1]`
       - User 2: `[3, 2, 6, 4, 5, 1, 2, 5, 4, 1]`
       - Total Difference: **2 + 1 + 2 =** **_5_**
       - Use the absolute value of the differences. no negative solutions.
4.  compare NewUser with each existing user in the friendData array. 
5.  save totalDifference with each user. 

6.  The closest match will be the user with the least amount of difference.

7. Once you've found the current user's most compatible friend, display the result as a modal pop-up.
   - The modal should display both the name and picture of the closest match.



//Logic: for total difference

app.post("/api/table", function (req, res) {
    // Note the code here. Our "server" will respond to requests and let users know if they have a table or not.
    // It will do this by sending out the value "true" have a table
    // req.body is available since we're using the body parsing middleware

    //current user input
    var userCurrentdata = req.body;

    //tableData

    var storeTotaldifference = [];
    var results = 0;
    for (var i = 0; i < tableData.length; i++) {

        //reset the results so it won't retain the previous total scores difference 
        results = 0;
        for (var j = 0; j < tableData[i].scores[i].length; j++) {
            results += userCurrentdata.scores[j] - tableData[i].scores[j];

        }
        //after subtracting, it will sum all the differences and put it in results
        // Math.abs(results) will get rid of negative integers.
        //Then it will put each object with total difference
        // in a separate array of object called storeTotaldifference
        storeTotaldifference.push({ name: tableData[i].name, urlImage: tableData[i].urlImage, totalDifference: Math.abs(results) });

    }//end outer for loop

        //reference: https://www.npmjs.com/package/array-sort
        // need to do npm install array-sort
        //this npm package allows you to sort the array of object. 
        //The first argument would 
        //be the array of objects and the second argument would be your property name to //be sorted in ascending order
        arraySort(storeTotaldifference, 'totalDifference');


        //insert current user to the existing tableData
        tableData.push(userCurrentdata);

        //first element of this array of object has the least total difference after sorting in //ascending order 
        //which is the closest match
        return res.json(storeTotaldifference[0]);

});






* Check out [this demo version of the site](https://friend-finder-fsf.herokuapp.com/). 
Use this as a model for how we expect your assignment look and operate.



### Instructions

1. Your survey should have 10 questions of your choosing. Each answer should be on a scale of 1 to 5 based on how much the user agrees or disagrees with a question.

2. Your `server.js` file should require the basic npm packages we've used in class: `express` and `path`.

3. Your `htmlRoutes.js` file should include two routes:

   * A GET Route to `/survey` which should display the survey page.
   * A default, catch-all route that leads to `home.html` which displays the home page.

4. Your `apiRoutes.js` file should contain two routes:

   * A GET route with the url `/api/friends`. This will be used to display a JSON of all possible friends.
   * A POST routes `/api/friends`. This will be used to handle incoming survey results. This route will also be used to handle the compatibility logic.

5. You should save your application's data inside of `app/data/friends.js` as an array of objects. Each of these objects should roughly follow the format below.

```json
{
  "name":"Ahmed",
  "photo":"https://media.licdn.com/mpr/mpr/shrinknp_400_400/p/6/005/064/1bd/3435aa3.jpg",
  "scores":[
      5,
      1,
      4,
      4,
      5,
      1,
      2,
      5,
      4,
      1
    ]
}
```

